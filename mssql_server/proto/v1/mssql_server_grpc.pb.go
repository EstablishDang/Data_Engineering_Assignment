// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: mssql_server/proto/v1/mssql_server.proto

package mssqlserver

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppMssqlMgmtServiceClient is the client API for AppMssqlMgmtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppMssqlMgmtServiceClient interface {
	GetVendor(ctx context.Context, in *GetVendorReq, opts ...grpc.CallOption) (*ListVendorResp, error)
	ListShipMethod(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListShipMethodResp, error)
	GetPurchaseOrderInfo(ctx context.Context, in *PurchaseOrderInfoReq, opts ...grpc.CallOption) (*PurchaseOrderInfo, error)
	AddNewVendor(ctx context.Context, in *AddNewVendorReq, opts ...grpc.CallOption) (*empty.Empty, error)
}

type appMssqlMgmtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppMssqlMgmtServiceClient(cc grpc.ClientConnInterface) AppMssqlMgmtServiceClient {
	return &appMssqlMgmtServiceClient{cc}
}

func (c *appMssqlMgmtServiceClient) GetVendor(ctx context.Context, in *GetVendorReq, opts ...grpc.CallOption) (*ListVendorResp, error) {
	out := new(ListVendorResp)
	err := c.cc.Invoke(ctx, "/mssql_server.AppMssqlMgmtService/GetVendor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMssqlMgmtServiceClient) ListShipMethod(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListShipMethodResp, error) {
	out := new(ListShipMethodResp)
	err := c.cc.Invoke(ctx, "/mssql_server.AppMssqlMgmtService/ListShipMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMssqlMgmtServiceClient) GetPurchaseOrderInfo(ctx context.Context, in *PurchaseOrderInfoReq, opts ...grpc.CallOption) (*PurchaseOrderInfo, error) {
	out := new(PurchaseOrderInfo)
	err := c.cc.Invoke(ctx, "/mssql_server.AppMssqlMgmtService/GetPurchaseOrderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMssqlMgmtServiceClient) AddNewVendor(ctx context.Context, in *AddNewVendorReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/mssql_server.AppMssqlMgmtService/AddNewVendor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppMssqlMgmtServiceServer is the server API for AppMssqlMgmtService service.
// All implementations should embed UnimplementedAppMssqlMgmtServiceServer
// for forward compatibility
type AppMssqlMgmtServiceServer interface {
	GetVendor(context.Context, *GetVendorReq) (*ListVendorResp, error)
	ListShipMethod(context.Context, *empty.Empty) (*ListShipMethodResp, error)
	GetPurchaseOrderInfo(context.Context, *PurchaseOrderInfoReq) (*PurchaseOrderInfo, error)
	AddNewVendor(context.Context, *AddNewVendorReq) (*empty.Empty, error)
}

// UnimplementedAppMssqlMgmtServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAppMssqlMgmtServiceServer struct {
}

func (UnimplementedAppMssqlMgmtServiceServer) GetVendor(context.Context, *GetVendorReq) (*ListVendorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendor not implemented")
}
func (UnimplementedAppMssqlMgmtServiceServer) ListShipMethod(context.Context, *empty.Empty) (*ListShipMethodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShipMethod not implemented")
}
func (UnimplementedAppMssqlMgmtServiceServer) GetPurchaseOrderInfo(context.Context, *PurchaseOrderInfoReq) (*PurchaseOrderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchaseOrderInfo not implemented")
}
func (UnimplementedAppMssqlMgmtServiceServer) AddNewVendor(context.Context, *AddNewVendorReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewVendor not implemented")
}

// UnsafeAppMssqlMgmtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppMssqlMgmtServiceServer will
// result in compilation errors.
type UnsafeAppMssqlMgmtServiceServer interface {
	mustEmbedUnimplementedAppMssqlMgmtServiceServer()
}

func RegisterAppMssqlMgmtServiceServer(s grpc.ServiceRegistrar, srv AppMssqlMgmtServiceServer) {
	s.RegisterService(&AppMssqlMgmtService_ServiceDesc, srv)
}

func _AppMssqlMgmtService_GetVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMssqlMgmtServiceServer).GetVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mssql_server.AppMssqlMgmtService/GetVendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMssqlMgmtServiceServer).GetVendor(ctx, req.(*GetVendorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMssqlMgmtService_ListShipMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMssqlMgmtServiceServer).ListShipMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mssql_server.AppMssqlMgmtService/ListShipMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMssqlMgmtServiceServer).ListShipMethod(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMssqlMgmtService_GetPurchaseOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseOrderInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMssqlMgmtServiceServer).GetPurchaseOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mssql_server.AppMssqlMgmtService/GetPurchaseOrderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMssqlMgmtServiceServer).GetPurchaseOrderInfo(ctx, req.(*PurchaseOrderInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMssqlMgmtService_AddNewVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewVendorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMssqlMgmtServiceServer).AddNewVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mssql_server.AppMssqlMgmtService/AddNewVendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMssqlMgmtServiceServer).AddNewVendor(ctx, req.(*AddNewVendorReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AppMssqlMgmtService_ServiceDesc is the grpc.ServiceDesc for AppMssqlMgmtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppMssqlMgmtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mssql_server.AppMssqlMgmtService",
	HandlerType: (*AppMssqlMgmtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVendor",
			Handler:    _AppMssqlMgmtService_GetVendor_Handler,
		},
		{
			MethodName: "ListShipMethod",
			Handler:    _AppMssqlMgmtService_ListShipMethod_Handler,
		},
		{
			MethodName: "GetPurchaseOrderInfo",
			Handler:    _AppMssqlMgmtService_GetPurchaseOrderInfo_Handler,
		},
		{
			MethodName: "AddNewVendor",
			Handler:    _AppMssqlMgmtService_AddNewVendor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mssql_server/proto/v1/mssql_server.proto",
}
